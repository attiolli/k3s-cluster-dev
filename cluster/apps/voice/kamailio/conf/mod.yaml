apiVersion: v1
kind: ConfigMap
metadata:
  name: kam-mod
  namespace: voice
data:
  kamailio-mod.cfg: |
    # ----- jsonrpcs params -----
    modparam("jsonrpcs", "pretty_format", 1)
    /* set the path to RPC fifo control file */
    # modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
    /* set the path to RPC unix socket control file */
    # modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")
    #!ifdef WITH_JSONRPC
    modparam("jsonrpcs", "transport", 7)
    #!endif
    
    # ----- ctl params -----
    /* set the path to RPC unix socket control file */
    # modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")
    
    # ----- sanity params -----
    modparam("sanity", "autodrop", 0)
    
    # ----- tm params -----
    # auto-discard branches from previous serial forking leg
    modparam("tm", "failure_reply_mode", 3)
    # default retransmission timeout: 30sec
    modparam("tm", "fr_timer", 30000)
    # default invite retransmission timeout after 1xx: 120sec
    modparam("tm", "fr_inv_timer", 120000)
    
    # ----- rr params -----
    # set next param to 1 to add value to ;lr param (helps with some UAs)
    modparam("rr", "enable_full_lr", 0)
    # do not append from tag to the RR (no need for this script)
    modparam("rr", "append_fromtag", 0)
    
    # ----- registrar params -----
    modparam("registrar", "method_filtering", 1)
    /* uncomment the next line to disable parallel forking via location */
    # modparam("registrar", "append_branches", 0)
    /* uncomment the next line not to allow more than 10 contacts per AOR */
    # modparam("registrar", "max_contacts", 10)
    /* max value for expires of registrations */
    modparam("registrar", "max_expires", 3600)
    /* set it to 1 to enable GRUU */
    modparam("registrar", "gruu_enabled", 0)
    /* set it to 0 to disable Path handling */
    modparam("registrar", "use_path", 1)
    /* save Path even if not listed in Supported header */
    modparam("registrar", "path_mode", 0)
    
    # ----- acc params -----
    /* what special events should be accounted ? */
    modparam("acc", "early_media", 0)
    modparam("acc", "report_ack", 0)
    modparam("acc", "report_cancels", 0)
    /* by default we do not adjust the direct of the sequential requests.
     * if you enable this parameter, be sure the enable "append_fromtag"
     * in "rr" module */
    modparam("acc", "detect_direction", 0)
    /* account triggers (flags) */
    modparam("acc", "log_flag", FLT_ACC)
    modparam("acc", "log_missed_flag", FLT_ACCMISSED)
    modparam("acc", "log_extra",
            "src_user=$fU;src_domain=$fd;src_ip=$si;"
            "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
    modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
    /* enhanced DB accounting */
    #!ifdef WITH_ACCDB
    modparam("acc", "db_flag", FLT_ACC)
    modparam("acc", "db_missed_flag", FLT_ACCMISSED)
    modparam("acc", "db_url", DBURL)
    modparam("acc", "db_extra",
            "src_user=$fU;src_domain=$fd;src_ip=$si;"
            "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
    #!endif
    
    # ----- usrloc params -----
    modparam("usrloc", "timer_interval", 60)
    modparam("usrloc", "timer_procs", 1)
    modparam("usrloc", "use_domain", MULTIDOMAIN)
    /* enable DB persistency for location entries */
    #!ifdef WITH_USRLOCDB
    modparam("usrloc", "db_url", DBURL)
    modparam("usrloc", "db_mode", 2)
    #!endif
    
    # ----- auth_db params -----
    #!ifdef WITH_AUTH
    modparam("auth_db", "db_url", DBURL)
    modparam("auth_db", "calculate_ha1", yes)
    modparam("auth_db", "password_column", "password")
    modparam("auth_db", "load_credentials", "")
    modparam("auth_db", "use_domain", MULTIDOMAIN)
    
    # ----- permissions params -----
    #!ifdef WITH_IPAUTH
    modparam("permissions", "db_url", DBURL)
    modparam("permissions", "load_backends", 1)
    #!endif
    
    #!endif
    
    # ----- alias_db params -----
    #!ifdef WITH_ALIASDB
    modparam("alias_db", "db_url", DBURL)
    modparam("alias_db", "use_domain", MULTIDOMAIN)
    #!endif
    
    # ----- speeddial params -----
    #!ifdef WITH_SPEEDDIAL
    modparam("speeddial", "db_url", DBURL)
    modparam("speeddial", "use_domain", MULTIDOMAIN)
    #!endif
    
    # ----- domain params -----
    #!ifdef WITH_MULTIDOMAIN
    modparam("domain", "db_url", DBURL)
    /* register callback to match myself condition with domains list */
    modparam("domain", "register_myself", 1)
    #!endif
    
    #!ifdef WITH_PRESENCE
    # ----- presence params -----
    modparam("presence", "db_url", DBURL)
    
    # ----- presence_xml params -----
    modparam("presence_xml", "db_url", DBURL)
    modparam("presence_xml", "force_active", 1)
    #!endif
    
    #!ifdef WITH_NAT
    #!ifdef WITH_RTPENGINE
    # ----- rtpengine params -----
    modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
    #!else
    # ----- rtpproxy params -----
    modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
    #!endif
    # ----- nathelper params -----
    modparam("nathelper", "natping_interval", 30)
    modparam("nathelper", "ping_nated_only", 1)
    modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
    modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")
    
    # params needed for NAT traversal in other modules
    modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
    modparam("usrloc", "nat_bflag", FLB_NATB)
    #!endif
    
    #!ifdef WITH_TLS
    # ----- tls params -----
    modparam("tls", "config", "/etc/kamailio/tls.cfg")
    #!endif
    
    #!ifdef WITH_ANTIFLOOD
    # ----- pike params -----
    modparam("pike", "sampling_time_unit", 2)
    modparam("pike", "reqs_density_per_unit", 16)
    modparam("pike", "remove_latency", 4)
    #!endif
    
    #!ifdef WITH_HTABLE
    # ----- htable params -----
    #!ifdef WITH_ANTIFLOOD
    /* ip ban htable with autoexpire after 5 minutes */
    modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
    #!endif
    #!endif
    
    #!ifdef WITH_DEBUG
    # ----- debugger params -----
    modparam("debugger", "cfgtrace", 1)
    modparam("debugger", "log_level_name", "exec")
    #!endif
